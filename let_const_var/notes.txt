if we are declaring something using var keyword then its scope is defined as funcion scoped
if we are declaring something using let and const then its scope is defined as blocked scope.

no need of using var its better to use let and const. 


VAR => : 
-----------
var name = "deepak"
name ="deepak kumar nayak"
console.log(name)

Output 
deepak kumar nayak

with the help of var we can update it as well as we cav redclare it 

var fulname = "deepak"
var fulname = "deepak kumar"

console.log(fulname)

so here i am re-declaring it with var

LET => : 
---------

let courseName = "javascript"
courseName = "chai are code"
console.log(courseName)

so let also allows us to updare it but it will never all us to re declare it just like var.
in case of let ot will give is a syntax error: 
SyntaxError: Identifier 'isLogin' has already been declared
let isLogin = true;
let isLogin = true

- in Case of let i can only do the declaration and i can initialize it later for example : 
let a;      # here i am only declaring it
a = 10      # here i am initializing it.

const
------
If we want to define something throught out the program which value we dont want to change then 
we can use const for that. 

const will never allow us to re-declare it and will also never allow us to updare it.

with const we can never update it as we used to do with let and var if we do then we will get an
"TypeError as Assignment to const variable"


- 
in cont we cannot leave it only by declaring as i have done in let see line number 39 there i have only declared it, but 
cont will not allow us to do that in cost we have to initialize it 

const a; # this is wrong we will get an error that missing initializer in const declaration
const a = 10 ; # this is what we have to do.


---
let, var and const behave very diffrently during hoisting

    console.log(b)
    conosole.log(a)
    let a = 10 
    var b = 20

- The most important Point is Let and Const are also hoisted just like VAR But it is being hoisted diffrently
- even before the single line of code is executed the memory is allocated to var and let. 

- here i am trying to access b, yes we can access it here and we will not get any error as well but 
    we will get a special value called undefined.

- but if i try to access a then we will get an error here.
    error Reference Error cannot accces a before initialization

- we can see that the variable b is attacted to Global object and the the variable  a (let and const)
    is inside the Script Tag javascript will allocate memory to a as well as to b and the value which 
    is being assigned to it is undefined.

    so from this one thing is pretty clear that the let and const are also bueng hoisted but they are being stored in a
    in a diffrent momory space than global

Temporal Dead Zone
-------------------
The time since when the variable was hoisted and till its get the value so the amount of time 
being taken is known as the Temporal Dead Zone.

for example: 
-----------
console.log(a)
let a = 10 

so here i am trying to access the value defined with let so what will happen here a will be hoisted and memory 
will also be allocated to them the variable a will be inside the Script tag with a special value called undefined 
so here the temporal dead zone will start and when it will end till its get the value 10 as soon as its gets the value
1o inside it instead of undefined at that particular time Temporal Dead Zone will end 

so whenever we try to acces a variable inside the Temporal Dead Zone its gives us a Reference Error that cannot access a
before initialization and can only be accessed when some value get initialized to them 

Note:
-----
- for b we will get undefined 
- for a we will get reference error cannot access a before initialization 
- Why we get undefined because memory was allocated but the initialization is not done
    so we get an special keyword/placeholder called undefined

- we can access the value of b in the browser by writting (var a = 10) window.b because they are attatched to
window object but we cannot acces the variables wich are declared with let and const because they are stored in
a diffrent space and that is not the global space and we will get undefined there.